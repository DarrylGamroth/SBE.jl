# Generated SBE (Simple Binary Encoding) message codec
# Code generated by SBE. DO NOT EDIT.

export OptionalExtras, OptionalExtrasDecoder, OptionalExtrasEncoder
struct OptionalExtras{T<:AbstractArray{UInt8}}
    buffer::T
    offset::Int64
    acting_version::UInt16
    function OptionalExtras(buffer::T, offset::Integer=0, acting_version::Integer=0) where {T}
        new{T}(buffer, offset, acting_version)
    end
end
const OptionalExtrasDecoder = OptionalExtras
const OptionalExtrasEncoder = OptionalExtras

sbe_buffer(m::OptionalExtras) = m.buffer
sbe_offset(m::OptionalExtras) = m.offset
sbe_acting_version(m::OptionalExtras) = m.acting_version
sbe_encoded_length(::OptionalExtras) = UInt16(0x1)
sbe_encoded_length(::Type{<:OptionalExtras}) = UInt16(0x1)
sbe_schema_id(::OptionalExtras) = UInt16(0x1)
sbe_schema_id(::Type{<:OptionalExtras}) = UInt16(0x1)
sbe_schema_version(::OptionalExtras) = UInt16(0x0)
sbe_schema_version(::Type{<:OptionalExtras}) = UInt16(0x0)
Base.sizeof(m::OptionalExtras) = sbe_encoded_length(m)

function Base.convert(::Type{<:AbstractArray{UInt8}}, m::OptionalExtrasEncoder)
    return view(m.buffer, m.offset+1:m.offset+sbe_encoded_length(m))
end

@inline clear!(m::OptionalExtrasEncoder) = encode_le(UInt8, m.buffer, m.offset, 0)
@inline is_empty(m::OptionalExtrasDecoder) = decode_le(UInt8, m.buffer, m.offset) == 0
@inline raw_value(m::OptionalExtrasDecoder) = decode_le(UInt8, m.buffer, m.offset)

@inline function sunRoof(m::OptionalExtrasDecoder)
    return decode_le(UInt8, m.buffer, m.offset) & (UInt8(0x1) << 0) != 0
end

@inline function sunRoof!(m::OptionalExtrasEncoder, value::Bool)
    bits = decode_le(UInt8, m.buffer, m.offset)
    bits = value ? (bits | (UInt8(0x1) << 0)) : (bits & ~(UInt8(0x1) << 0))
    encode_le(UInt8, m.buffer, m.offset, bits)
end

@inline function sportsPack(m::OptionalExtrasDecoder)
    return decode_le(UInt8, m.buffer, m.offset) & (UInt8(0x1) << 1) != 0
end

@inline function sportsPack!(m::OptionalExtrasEncoder, value::Bool)
    bits = decode_le(UInt8, m.buffer, m.offset)
    bits = value ? (bits | (UInt8(0x1) << 1)) : (bits & ~(UInt8(0x1) << 1))
    encode_le(UInt8, m.buffer, m.offset, bits)
end

@inline function cruiseControl(m::OptionalExtrasDecoder)
    return decode_le(UInt8, m.buffer, m.offset) & (UInt8(0x1) << 2) != 0
end

@inline function cruiseControl!(m::OptionalExtrasEncoder, value::Bool)
    bits = decode_le(UInt8, m.buffer, m.offset)
    bits = value ? (bits | (UInt8(0x1) << 2)) : (bits & ~(UInt8(0x1) << 2))
    encode_le(UInt8, m.buffer, m.offset, bits)
end

function show(io::IO, writer::OptionalExtras)
    print(io, "[")
    at_least_one = false
    if sunRoof(writer)
        print(io, "\"sunRoof\"")
        at_least_one = true
    end
    if sportsPack(writer)
        at_least_one && print(io, ", ")
        print(io, "\"sportsPack\"")
        at_least_one = true
    end
    if cruiseControl(writer)
        at_least_one && print(io, ", ")
        print(io, "\"cruiseControl\"")
    end
    print(io, "]")
end

