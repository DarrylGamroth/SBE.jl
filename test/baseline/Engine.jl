# Generated SBE (Simple Binary Encoding) message codec
# Code generated by SBE. DO NOT EDIT.

export Engine, EngineDecoder, EngineEncoder
struct Engine{T<:AbstractArray{UInt8}}
    buffer::T
    offset::Int64
    acting_version::UInt16
    function Engine(buffer::T, offset::Integer=0, acting_version::Integer=0) where {T}
        new{T}(buffer, offset, acting_version)
    end
end
const EngineDecoder = Engine
const EngineEncoder = Engine

sbe_buffer(m::Engine) = m.buffer
sbe_offset(m::Engine) = m.offset
sbe_acting_version(m::Engine) = m.acting_version
sbe_encoded_length(::Engine) = UInt16(0xa)
sbe_encoded_length(::Type{<:Engine}) = UInt16(0xa)
sbe_schema_id(::Engine) = UInt16(0x1)
sbe_schema_id(::Type{<:Engine}) = UInt16(0x1)
sbe_schema_version(::Engine) = UInt16(0x0)
sbe_schema_version(::Type{<:Engine}) = UInt16(0x0)
Base.sizeof(m::Engine) = sbe_encoded_length(m)

function Base.convert(::Type{<:AbstractArray{UInt8}}, m::EngineEncoder)
    return view(m.buffer, m.offset+1:m.offset+sbe_encoded_length(m))
end

function capacity_meta_attribute(::Engine, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    return Symbol("")
end
capacity_id(::Engine) = UInt16(0xffff)
capacity_id(::Type{<:Engine}) = UInt16(0xffff)
capacity_since_version(::Engine) = UInt16(0x0)
capacity_since_version(::Type{<:Engine}) = UInt16(0x0)
capacity_in_acting_version(m::Engine) = sbe_acting_version(m) >= UInt16(0x0)
capacity_encoding_offset(::Engine) = 0
capacity_encoding_offset(::Type{<:Engine}) = 0
capacity_null_value(::Engine) = UInt16(0xffff)
capacity_null_value(::Type{<:Engine}) = UInt16(0xffff)
capacity_min_value(::Engine) = UInt16(0x0)
capacity_min_value(::Type{<:Engine}) = UInt16(0x0)
capacity_max_value(::Engine) = UInt16(0xfffe)
capacity_max_value(::Type{<:Engine}) = UInt16(0xfffe)
capacity_encoding_length(::Engine) = 2
capacity_encoding_length(::Type{<:Engine}) = 2

@inline function capacity(m::EngineDecoder)
    return decode_le(UInt16, m.buffer, m.offset + 0)
end
@inline capacity!(m::EngineEncoder, value) = encode_le(UInt16, m.buffer, m.offset + 0, value)

function numCylinders_meta_attribute(::Engine, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    return Symbol("")
end
numCylinders_id(::Engine) = UInt16(0xffff)
numCylinders_id(::Type{<:Engine}) = UInt16(0xffff)
numCylinders_since_version(::Engine) = UInt16(0x0)
numCylinders_since_version(::Type{<:Engine}) = UInt16(0x0)
numCylinders_in_acting_version(m::Engine) = sbe_acting_version(m) >= UInt16(0x0)
numCylinders_encoding_offset(::Engine) = 2
numCylinders_encoding_offset(::Type{<:Engine}) = 2
numCylinders_null_value(::Engine) = UInt8(0xff)
numCylinders_null_value(::Type{<:Engine}) = UInt8(0xff)
numCylinders_min_value(::Engine) = UInt8(0x0)
numCylinders_min_value(::Type{<:Engine}) = UInt8(0x0)
numCylinders_max_value(::Engine) = UInt8(0xfe)
numCylinders_max_value(::Type{<:Engine}) = UInt8(0xfe)
numCylinders_encoding_length(::Engine) = 1
numCylinders_encoding_length(::Type{<:Engine}) = 1

@inline function numCylinders(m::EngineDecoder)
    return decode_le(UInt8, m.buffer, m.offset + 2)
end
@inline numCylinders!(m::EngineEncoder, value) = encode_le(UInt8, m.buffer, m.offset + 2, value)

function maxRpm_meta_attribute(::Engine, meta_attribute)
    meta_attribute === :presence && return Symbol("constant")
    return Symbol("")
end
maxRpm_id(::Engine) = UInt16(0xffff)
maxRpm_id(::Type{<:Engine}) = UInt16(0xffff)
maxRpm_since_version(::Engine) = UInt16(0x0)
maxRpm_since_version(::Type{<:Engine}) = UInt16(0x0)
maxRpm_in_acting_version(m::Engine) = sbe_acting_version(m) >= UInt16(0x0)
maxRpm_encoding_offset(::Engine) = 3
maxRpm_encoding_offset(::Type{<:Engine}) = 3
maxRpm_null_value(::Engine) = UInt16(0xffff)
maxRpm_null_value(::Type{<:Engine}) = UInt16(0xffff)
maxRpm_min_value(::Engine) = UInt16(0x0)
maxRpm_min_value(::Type{<:Engine}) = UInt16(0x0)
maxRpm_max_value(::Engine) = UInt16(0xfffe)
maxRpm_max_value(::Type{<:Engine}) = UInt16(0xfffe)
maxRpm_encoding_length(::Engine) = 0
maxRpm_encoding_length(::Type{<:Engine}) = 0
maxRpm(::Engine) = UInt16(0x2328)
maxRpm(::Type{<:Engine}) = UInt16(0x2328)

function manufacturerCode_meta_attribute(::Engine, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    return Symbol("")
end
manufacturerCode_id(::Engine) = UInt16(0xffff)
manufacturerCode_id(::Type{<:Engine}) = UInt16(0xffff)
manufacturerCode_since_version(::Engine) = UInt16(0x0)
manufacturerCode_since_version(::Type{<:Engine}) = UInt16(0x0)
manufacturerCode_in_acting_version(m::Engine) = sbe_acting_version(m) >= UInt16(0x0)
manufacturerCode_encoding_offset(::Engine) = 3
manufacturerCode_encoding_offset(::Type{<:Engine}) = 3
manufacturerCode_null_value(::Engine) = UInt8(0x0)
manufacturerCode_null_value(::Type{<:Engine}) = UInt8(0x0)
manufacturerCode_min_value(::Engine) = UInt8(0x20)
manufacturerCode_min_value(::Type{<:Engine}) = UInt8(0x20)
manufacturerCode_max_value(::Engine) = UInt8(0x7e)
manufacturerCode_max_value(::Type{<:Engine}) = UInt8(0x7e)
manufacturerCode_encoding_length(::Engine) = 3
manufacturerCode_encoding_length(::Type{<:Engine}) = 3
manufacturerCode_length(::Engine) = 3
manufacturerCode_length(::Type{<:Engine}) = 3
manufacturerCode_eltype(::Engine) = UInt8
manufacturerCode_eltype(::Type{<:Engine}) = UInt8

@inline function manufacturerCode(m::EngineDecoder)
    return mappedarray(ltoh, reinterpret(UInt8, view(m.buffer, m.offset+3+1:m.offset+3+sizeof(UInt8)*3)))
end

@inline function manufacturerCode(m::EngineDecoder, ::Type{<:SVector})
    return mappedarray(ltoh, reinterpret(SVector{3,UInt8}, view(m.buffer, m.offset+3+1:m.offset+3+sizeof(UInt8)*3))[])
end

@inline function manufacturerCode(m::EngineDecoder, ::Type{<:AbstractString})
    value = view(m.buffer, m.offset+1+3:m.offset+3+sizeof(UInt8)*3)
    return StringView(rstrip_nul(value))
end

@inline function manufacturerCode(m::EngineDecoder, ::Type{<:Symbol})
    Symbol(manufacturerCode(m, AbstractString))
end

@inline function manufacturerCode!(m::EngineEncoder)
    return mappedarray(ltoh, htol, reinterpret(UInt8, view(m.buffer, m.offset+3+1:m.offset+3+sizeof(UInt8)*3)))
end

@inline function manufacturerCode!(m::EngineEncoder, value)
    copyto!(manufacturerCode!(m), value)
end

@inline function manufacturerCode!(m::EngineEncoder, value::AbstractString)
    dest = manufacturerCode!(m)
    fill!(dest, 0)
    copyto!(dest, value)
end

@inline function manufacturerCode!(m::EngineEncoder, value::Symbol)
    manufacturerCode!(m, to_string(value))
end

function fuel_meta_attribute(::Engine, meta_attribute)
    meta_attribute === :presence && return Symbol("constant")
    return Symbol("")
end
fuel_id(::Engine) = UInt16(0xffff)
fuel_id(::Type{<:Engine}) = UInt16(0xffff)
fuel_since_version(::Engine) = UInt16(0x0)
fuel_since_version(::Type{<:Engine}) = UInt16(0x0)
fuel_in_acting_version(m::Engine) = sbe_acting_version(m) >= UInt16(0x0)
fuel_encoding_offset(::Engine) = 6
fuel_encoding_offset(::Type{<:Engine}) = 6
fuel_null_value(::Engine) = UInt8(0x0)
fuel_null_value(::Type{<:Engine}) = UInt8(0x0)
fuel_min_value(::Engine) = UInt8(0x20)
fuel_min_value(::Type{<:Engine}) = UInt8(0x20)
fuel_max_value(::Engine) = UInt8(0x7e)
fuel_max_value(::Type{<:Engine}) = UInt8(0x7e)
fuel_encoding_length(::Engine) = 0
fuel_encoding_length(::Type{<:Engine}) = 0
fuel(::Engine) = "Petrol"
fuel(::Type{<:Engine}) = "Petrol"

function efficiency_meta_attribute(::Engine, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    return Symbol("")
end
efficiency_id(::Engine) = UInt16(0xffff)
efficiency_id(::Type{<:Engine}) = UInt16(0xffff)
efficiency_since_version(::Engine) = UInt16(0x0)
efficiency_since_version(::Type{<:Engine}) = UInt16(0x0)
efficiency_in_acting_version(m::Engine) = sbe_acting_version(m) >= UInt16(0x0)
efficiency_encoding_offset(::Engine) = 6
efficiency_encoding_offset(::Type{<:Engine}) = 6
efficiency_null_value(::Engine) = Int8(-128)
efficiency_null_value(::Type{<:Engine}) = Int8(-128)
efficiency_min_value(::Engine) = Int8(0)
efficiency_min_value(::Type{<:Engine}) = Int8(0)
efficiency_max_value(::Engine) = Int8(100)
efficiency_max_value(::Type{<:Engine}) = Int8(100)
efficiency_encoding_length(::Engine) = 1
efficiency_encoding_length(::Type{<:Engine}) = 1

@inline function efficiency(m::EngineDecoder)
    return decode_le(Int8, m.buffer, m.offset + 6)
end
@inline efficiency!(m::EngineEncoder, value) = encode_le(Int8, m.buffer, m.offset + 6, value)

function boosterEnabled_meta_attribute(::Engine, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    return Symbol("")
end
boosterEnabled_id(::Engine) = UInt16(0xffff)
boosterEnabled_id(::Type{<:Engine}) = UInt16(0xffff)
boosterEnabled_since_version(::Engine) = UInt16(0x0)
boosterEnabled_since_version(::Type{<:Engine}) = UInt16(0x0)
boosterEnabled_in_acting_version(m::Engine) = sbe_acting_version(m) >= UInt16(0x0)
boosterEnabled_encoding_offset(::Engine) = 7
boosterEnabled_encoding_offset(::Type{<:Engine}) = 7
boosterEnabled_encoding_length(::Engine) = 1
boosterEnabled_encoding_length(::Type{<:Engine}) = 1
@inline function boosterEnabled(m::EngineDecoder, ::Type{Integer})
    return decode_le(UInt8, m.buffer, m.offset + 7)
end
@inline function boosterEnabled(m::EngineDecoder)
    return BooleanType.SbeEnum(decode_le(UInt8, m.buffer, m.offset + 7))
end
@inline boosterEnabled!(m::EngineEncoder, value::BooleanType.SbeEnum) = encode_le(UInt8, m.buffer, m.offset + 7, UInt8(value))

function booster_meta_attribute(::Engine, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    return Symbol("")
end
booster_id(::Engine) = UInt16(0xffff)
booster_id(::Type{<:Engine}) = UInt16(0xffff)
booster_since_version(::Engine) = UInt16(0x0)
booster_since_version(::Type{<:Engine}) = UInt16(0x0)
booster_in_acting_version(m::Engine) = sbe_acting_version(m) >= UInt16(0x0)
booster_encoding_offset(::Engine) = 8
booster_encoding_offset(::Type{<:Engine}) = 8
booster(m::Engine) = Booster(m.buffer, m.offset + 8, sbe_acting_version(m))

function show(io::IO, writer::Engine{T}) where {T}
    println(io, "Engine view over a type $T")
    print(io, "capacity: ")
    print(io, capacity(writer))

    println(io)
    print(io, "numCylinders: ")
    print(io, numCylinders(writer))

    println(io)
    print(io, "manufacturerCode: ")
    print(io, "\"")
    print(io, manufacturerCode(writer, StringView))
    print(io, "\"")

    println(io)
    print(io, "efficiency: ")
    print(io, efficiency(writer))

    println(io)
    print(io, "boosterEnabled: ")
    print(io, boosterEnabled(writer))

    println(io)
    print(io, "booster: ")
    show(io, booster(writer))

end
