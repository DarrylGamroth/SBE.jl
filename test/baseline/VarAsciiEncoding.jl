# Generated SBE (Simple Binary Encoding) message codec
# Code generated by SBE. DO NOT EDIT.

export VarAsciiEncoding, VarAsciiEncodingDecoder, VarAsciiEncodingEncoder
struct VarAsciiEncoding{T<:AbstractArray{UInt8}}
    buffer::T
    offset::Int64
    acting_version::UInt16
    function VarAsciiEncoding(buffer::T, offset::Integer=0, acting_version::Integer=0) where {T}
        new{T}(buffer, offset, acting_version)
    end
end
const VarAsciiEncodingDecoder = VarAsciiEncoding
const VarAsciiEncodingEncoder = VarAsciiEncoding

sbe_buffer(m::VarAsciiEncoding) = m.buffer
sbe_offset(m::VarAsciiEncoding) = m.offset
sbe_acting_version(m::VarAsciiEncoding) = m.acting_version
sbe_encoded_length(::VarAsciiEncoding) = typemax(UInt16)
sbe_encoded_length(::Type{<:VarAsciiEncoding}) = typemax(UInt16)
sbe_schema_id(::VarAsciiEncoding) = UInt16(0x1)
sbe_schema_id(::Type{<:VarAsciiEncoding}) = UInt16(0x1)
sbe_schema_version(::VarAsciiEncoding) = UInt16(0x0)
sbe_schema_version(::Type{<:VarAsciiEncoding}) = UInt16(0x0)
Base.sizeof(m::VarAsciiEncoding) = sbe_encoded_length(m)

function Base.convert(::Type{<:AbstractArray{UInt8}}, m::VarAsciiEncodingEncoder)
    return view(m.buffer, m.offset+1:m.offset+sbe_encoded_length(m))
end

function length_meta_attribute(::VarAsciiEncoding, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    return Symbol("")
end
length_id(::VarAsciiEncoding) = UInt16(0xffff)
length_id(::Type{<:VarAsciiEncoding}) = UInt16(0xffff)
length_since_version(::VarAsciiEncoding) = UInt16(0x0)
length_since_version(::Type{<:VarAsciiEncoding}) = UInt16(0x0)
length_in_acting_version(m::VarAsciiEncoding) = sbe_acting_version(m) >= UInt16(0x0)
length_encoding_offset(::VarAsciiEncoding) = 0
length_encoding_offset(::Type{<:VarAsciiEncoding}) = 0
length_null_value(::VarAsciiEncoding) = UInt32(0xffffffff)
length_null_value(::Type{<:VarAsciiEncoding}) = UInt32(0xffffffff)
length_min_value(::VarAsciiEncoding) = UInt32(0x0)
length_min_value(::Type{<:VarAsciiEncoding}) = UInt32(0x0)
length_max_value(::VarAsciiEncoding) = UInt32(0x40000000)
length_max_value(::Type{<:VarAsciiEncoding}) = UInt32(0x40000000)
length_encoding_length(::VarAsciiEncoding) = 4
length_encoding_length(::Type{<:VarAsciiEncoding}) = 4

@inline function length(m::VarAsciiEncodingDecoder)
    return decode_le(UInt32, m.buffer, m.offset + 0)
end
@inline length!(m::VarAsciiEncodingEncoder, value) = encode_le(UInt32, m.buffer, m.offset + 0, value)

function varData_meta_attribute(::VarAsciiEncoding, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    return Symbol("")
end
varData_id(::VarAsciiEncoding) = UInt16(0xffff)
varData_id(::Type{<:VarAsciiEncoding}) = UInt16(0xffff)
varData_since_version(::VarAsciiEncoding) = UInt16(0x0)
varData_since_version(::Type{<:VarAsciiEncoding}) = UInt16(0x0)
varData_in_acting_version(m::VarAsciiEncoding) = sbe_acting_version(m) >= UInt16(0x0)
varData_encoding_offset(::VarAsciiEncoding) = 4
varData_encoding_offset(::Type{<:VarAsciiEncoding}) = 4
varData_null_value(::VarAsciiEncoding) = UInt8(0xff)
varData_null_value(::Type{<:VarAsciiEncoding}) = UInt8(0xff)
varData_min_value(::VarAsciiEncoding) = UInt8(0x0)
varData_min_value(::Type{<:VarAsciiEncoding}) = UInt8(0x0)
varData_max_value(::VarAsciiEncoding) = UInt8(0xfe)
varData_max_value(::Type{<:VarAsciiEncoding}) = UInt8(0xfe)
varData_encoding_length(::VarAsciiEncoding) = -1
varData_encoding_length(::Type{<:VarAsciiEncoding}) = -1

function show(io::IO, writer::VarAsciiEncoding{T}) where {T}
    println(io, "VarAsciiEncoding view over a type $T")
    print(io, "length: ")
    print(io, length(writer))

end
